#!/bin/bash

#
#	License type: BSD 3-Clause License
#	License copy: https://github.com/Telecominfraproject/wlan-cloud-ucentralgw/blob/master/LICENSE
#
#	Created by Stephane Bourque on 2021-03-04.
#	Arilia Wireless Inc.
#

if [[ "$(which jq)" == "" ]]
then
  echo "You need the package jq installed to use this script."
  exit 1
fi

if [[ "$(which curl)" == "" ]]
then
  echo "You need the package curl installed to use this script."
  exit 1
fi

if [[ "${OWSEC}" == "" ]]
then
  echo "You must set the variable OWSEC in order to use this script. Something like"
  echo "OWSEC=security.isp.com:16001"
  exit 1
fi

if [[ "${FLAGS}" == "" ]]
then
	FLAGS="-s"
fi

token=""
result_file=result.json
browser_list=(firefox sensible-browser xdg-open w3m links links2 lynx youtube-dl)
browser=""

if [ -z ${OWSEC_USERNAME+x} ]; then
  username="script.runner@arilia.com"
else
  username=${OWSEC_USERNAME}
fi
if [ -z ${OWSEC_PASSWORD+x} ]; then
  password="Snoopy99!!!"
else
  password=${OWSEC_PASSWORD}
fi

login() {
  payload="{ \"userId\" : \"$username\" , \"password\" : \"$password\" }"
  token=$(curl ${FLAGS} -X POST -H "Content-Type: application/json" -d "$payload" "https://${OWSEC}/api/v1/oauth2" | jq -r '.access_token')

  if [[ "${token}" == "" ]]
  then
  	echo "Could not login. Please verify the host and username/password."
    exit 13
  fi
  echo "${token}" > token.json
  setfms
}

findbrowser() {
	if [[ "${browser}" != "" ]]
	then
		echo
	elif [[ "$(uname)" == "Darwin" ]]
	then
		browser=open
	else
		BROWSER_LIST=(firefox sensible-browser xdg-open w3m links links2 lynx youtube-dl)
		for br_name in "${browser_list[@]}"
		do
			if [[ $(which ${br_name}) != "" ]]
			then
				browser=${br_name}
				break
			fi
		done
	fi
}

setfms() {
if [ -z ${OWFMS_OVERRIDE+x} ]; then
	curl  ${FLAGS} -X GET "https://${OWSEC}/api/v1/systemEndpoints" \
        -H "accept: application/json" \
        -H "Authorization: Bearer ${token}"  > ${result_file}
	rawurl="$(cat ${result_file} | jq -r '.endpoints[] | select( .type == "owfms" ) | .uri')"
	if [[ ! -z "${rawurl}" ]]; then
		proto="$(echo $rawurl | grep :// | sed -e's,^\(.*://\).*,\1,g')"
		url="$(echo ${rawurl/$proto/})"
		user="$(echo $url | grep @ | cut -d@ -f1)"
		hostport="$(echo ${url/$user@/} | cut -d/ -f1)"
		host="$(echo $hostport | sed -e 's,:.*,,g')"
		port="$(echo $hostport | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
		path="$(echo $url | grep / | cut -d/ -f2-)"
		export OWFMS=${url}
		echo "Using ${OWFMS}..."
	else
		echo "OWFMS endpoint is not found:"
		jq < ${result_file}
		exit 1
	fi

else
	export OWFMS=${OWFMS_OVERRIDE}
fi

}

logout() {
  curl  ${FLAGS} -X DELETE -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWSEC}/api/v1/oauth2/${token}"
  rm -rf token.json
}

getfirmwares() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/firmwares?deviceType=$1" > ${result_file}
	jq < ${result_file}
}

latestfirmware() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/firmwares?latestOnly=true&deviceType=$1" > ${result_file}
    jq < ${result_file}
}

revisions() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/firmwares?revisionSet=true" > ${result_file}
    jq < ${result_file}
}

devicetypes() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/firmwares?deviceSet=true" > ${result_file}
    jq < ${result_file}
}

firmwareage() {
    curl  ${FLAGS} -G -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/firmwareAge" --data-urlencode "deviceType=$1" --data-urlencode "revision=$2" > ${result_file}
    jq < ${result_file}
}

gethistory() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/revisionHistory/$1" > ${result_file}
    jq < ${result_file}
}

connecteddevice() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/connectedDevice/$1" > ${result_file}
    jq < ${result_file}
}

connecteddevices() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/connectedDevices" > ${result_file}
    jq < ${result_file}
}

devicereport() {
    curl  ${FLAGS} -X GET -H "Content-Type: application/json" \
        -H "Authorization: Bearer ${token}" \
        "https://${OWFMS}/api/v1/deviceReport" > ${result_file}
    jq < ${result_file}
}

setloglevel() {
    payload="{ \"command\" : \"setloglevel\" , \"subsystems\" : [ { \"tag\" : \"$1\" , \"value\" : \"$2\" } ] }"
            curl  ${FLAGS} -X POST "https://${OWFMS}/api/v1/system" \
            -H  "accept: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d "$payload"
}

getloglevels() {
    payload="{ \"command\" : \"getloglevels\" }"
            curl  ${FLAGS} -X POST "https://${OWFMS}/api/v1/system" \
            -H  "accept: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d "$payload"
}

getloglevelnames() {
    payload="{ \"command\" : \"getloglevelnames\" }"
            curl  ${FLAGS} -X POST "https://${OWFMS}/api/v1/system" \
            -H  "accept: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d "$payload"
}

getsubsystemnames() {
    payload="{ \"command\" : \"getsubsystemnames\" }"
            curl  ${FLAGS} -X POST "https://${OWFMS}/api/v1/system" \
            -H  "accept: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d "$payload"
}

systeminfo() {
    curl  ${FLAGS} -X GET "https://${OWFMS}/api/v1/system?command=info" \
    -H "accept: application/json" \
    -H "Authorization: Bearer ${token}" > ${result_file}
    jq < ${result_file}
}

reloadsubsystem() {
    payload="{ \"command\" : \"reload\", \"subsystems\" : [ \"$1\" ] }"
            curl  ${FLAGS} -X POST "https://${OWFMS}/api/v1/system" \
            -H  "accept: application/json" \
            -H "Authorization: Bearer ${token}" \
            -d "$payload"
}

help() {

    echo    "Usage: cli <cmd> [args]"
    echo
    echo    "getfirmwares                           Get a lit of firmwares"
    echo    "latestfirmware <device_type>           Get the latest firmware for the device_type specified"
    echo    "revisions                              Get a list of revisions available."
    echo    "devicetypes                            Get the list of device types supported."
    echo    "firmwareage <device_type> <revision>   Calculate how out of date a specific release it."
    echo    "gethistory <device serial number>      Get the device firmware history."
    echo    "connecteddevice <device serial number> Get the device status."
    echo    "connectedDevices                       Get the list of connected devices."
    echo    "devicereport                           Get the dashboard."
    echo    "setloglevel <subsystem> <loglevel>     Set the log level for s specific subsystem."
    echo    "getloglevels                           Get the current log levels for all subsystems."
    echo    "getloglevelnames                       Get the log level names available."
    echo    "getsubsystemnames                      Get the list of subsystems."
    echo    "systeminfo                             Get basic system information."
    echo    "reloadsubsystem <subsystem name>       Reload the configuration for a subsystem."
    echo
    echo
}

shopt -s nocasematch
case "$1" in
    "login") login; help  ; logout ;;
    "getfirmwares") login; getfirmwares "$2"; logout ;;
    "latestfirmware") login; latestfirmware "$2"; logout ;;
    "revisions") login; revisions; logout ;;
    "devicetypes") login; devicetypes; logout ;;
    "firmwareage") login; firmwareage "$2" "$3"; logout ;;
    "gethistory") login; gethistory "$2"; logout ;;
    "connecteddevices") login; connecteddevices ; logout ;;
    "connecteddevice") login; connecteddevice "$2" ; logout ;;
    "devicereport") login; devicereport; logout ;;
    "setloglevel") login; setloglevel "$2" "$3"  ; logout ;;
    "getloglevels") login; getloglevels; logout ;;
    "getloglevelnames") login; getloglevelnames; logout ;;
    "getsubsystemnames") login; getsubsystemnames; logout ;;
    "reloadsubsystem") login; reloadsubsystem "$2"; logout ;;
    "systeminfo") login; systeminfo ; logout;;
    *) help ;;
esac

