openapi: 3.0.1
info:
  title: uCentral Firmware Service API
  description: A process to manage new uCentral firmware distribution.
  version: 0.0.2
  license:
    name: BSD3
    url: https://github.com/Telecominfraproject/wlan-cloud-ucentralgw/blob/master/LICENSE
  contact:
    name: Arilia Support
    url: https://www.ucentral.info/support

servers:
  - url: 'https://localhost:15055/api/v1'

security:
  - ApiKeyAuth: []
  - bearerAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            properties:
              ErrorCode:
                type: integer
              ErrorDetails:
                type: string
              ErrorDescription:
                type: string

    Unauthorized:
      description: The requested does not have sufficient rights to perform the operation.
      content:
        application/json:
          schema:
            properties:
              ErrorCode:
                type: integer
              ErrorDetails:
                type: string
              ErrorDescription:
                type: string

    Success:
      description: The requested operation was performed.
      content:
        application/json:
          schema:
            properties:
              Operation:
                type: string
              Details:
                type: string
              Code:
                type: integer

  schemas:
    FirmwareDetails:
      type: object
      description: Definition of a firmware release
      properties:
        id:
          type: integer
          format: int64
        deviceType:
          type: string
        description:
          type: string
        revision:
          type: string
        uri:
          type: string
          format: uri
        image:
          type: string
        imageDate:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        downloadCount:
          type: integer
          format: int64
        firmwareHash:
          type: string
        owner:
          type: string
        location:
          type: string
          format: uri
        uploader:
          type: string
        digest:
          type: string
        latest:
          type: boolean
        notes:
          type: string
        created:
          type: integer
          format: int64

    FirmwareDetailsList:
      type: object
      properties:
        firmwares:
          type: array
          items:
            $ref: '#/components/schemas/FirmwareDetails'

    DeviceType:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deviceType:
          type: string
        manufacturer:
          type: string
        model:
          type: string
        policy:
          type: string
        notes:
          type: string
        lastUpdate:
          type: integer
          format: int64
        created:
          type: integer
          format: int64

    DeviceTypeList:
      type: object
      properties:
        deviceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DeviceType'

    DeviceEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        campaignId:
          type: integer
          format: int64
        serialNumber:
          type: string
        commandUUID:
          type: string
          format: uuid
        runAt:
          type: integer
          format: int64
        submitted:
          type: integer
          format: int64
        completed:
          type: integer
          format: int64

    DeviceEntryList:
      type: object
      properties:
        deviceEntries:
          type: array
          items:
            $ref: '#/components/schemas/DeviceEntry'

    RevisionHistoryEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        serialNumber:
          type: string
        revisionId:
          type: integer
          format: int64
        upgraded:
          type: integer
          format: int64
        commandUUID:
          type: string
          format: uuid

    RevisionHistoryEntryList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RevisionHistoryEntry'

    Campaign:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        started:
          type: integer
          format: int64
        canceled:
          type: integer
          format: int64
        startDate:
          type: integer
          format: int64
        schedule:
          type: string
        completed:
          type: integer
          format: int64
        deviceCount:
          type: integer
        completedDevices:
          type: integer
        submittedDevices:
          type: integer
        notes:
          type: string
        lastUpdate:
          type: integer
          format: int64
        created:
          type: integer
          format: int64

    CampaignList:
      type: object
      properties:
        campaigns:
          type: array
          items:
            $ref: '#/components/schemas/Campaign'

    GenericErrorResponse:
      description: Typical error response
      properties:
        ErrorCode:
          type: integer
        ErrorDetails:
          type: string
        ErrorDescription:
          type: string

    GenericGoodAnswer:
      description: used for all succesful responses.
      properties:
        Operation:
          type: string
        Details:
          type: string
        Code:
          type: integer

    #########################################################################################
    ##
    ## These are endpoints that all services in the uCentral stack must provide
    ##
    #########################################################################################
    AnyPayload:
      type: object
      properties:
        Document:
          type: string

    StringList:
      type: object
      properties:
        list:
          type: array
          items:
            type: string

    TagValuePair:
      type: object
      properties:
        tag:
          type: string
        value:
          type: string

    TagValuePairList:
      type: object
      properties:
        tagList:
          type: array
          items:
            $ref: '#/components/schemas/TagValuePair'

    SystemCommandDetails:
      type: object
      properties:
        command:
          type: string
          enum:
            - setloglevels
            - getloglevels
            - getSubSystemNames
            - getLogLevelNames
            - stats
        parameters:
          oneOf:
            - $ref: '#/components/schemas/StringList'
            - $ref: '#/components/schemas/TagValuePairList'

    SystemCommandResults:
      type: object
      oneOf:
        - $ref: '#/components/schemas/StringList'
        - $ref: '#/components/schemas/TagValuePairList'
    #########################################################################################
    ##
    ## End of uCentral system wide values
    ##
    #########################################################################################

paths:
  /firmwares:
    get:
      tags:
        - Firmware
      summary: Returns a list of firmwares.
      description: Get a list of firmwares.
      operationId: getFirmwareList
      parameters:
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false
        - in: query
          name: latestOnly
          description: Return only the latest firwares
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: List firmwares
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareDetailsList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /firmware/{id}:
    get:
      tags:
        - Firmware
      summary: Returns a Firmware
      description: Get a Firmware.
      operationId: getFirmware
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: A Firmware definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareDetails'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Firmware
      summary: Create A New firmware
      operationId: createFirmware
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirmwareDetails'
      responses:
        200:
          description: Created a firmware entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareDetails'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Firmware
      summary: Update A New firmware
      operationId: upodateFirmware
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Firmware details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirmwareDetails'
      responses:
        200:
          description: Successfully updated firmware
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareDetails'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Firmware
      summary: Delete some Firmware
      operationId: deleteFirmware
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: Successfully deleted Firmware for the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericGoodAnswer'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /deviceTypes:
    get:
      tags:
        - DeviceTypes
      summary: List all the defined device types
      operationId: getDeviceTypes
      parameters:
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false
      responses:
        200:
          description: List of known device types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceTypeList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /deviceType/{id}:
    get:
      tags:
        - DeviceTypes
      summary: Get a specific DeviceType
      operationId: getDeviceType
      parameters:
        - in: path
          description: ID of deviceType to retrieve
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          description: Get a single device type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceType'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - DeviceTypes
      summary: Delete a specific DeviceType
      operationId: deleteDeviceType
      parameters:
        - in: path
          description: ID of deviceType to retrieve
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - DeviceTypes
      summary: Modify a specific DeviceType
      operationId: modifyDeviceType
      parameters:
        - in: path
          description: ID of deviceType to modify
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Modifications for the DeviceType
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceType'
      responses:
        200:
          description: Get a single device type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceType'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /revisionHistory/{serialNumber}:
    get:
      tags:
        - RevisionHistory
      summary: List all the defined device revision history
      operationId: getRevisionHistory
      parameters:
        - in: path
          name: serialNumber
          schema:
            type: string
          required: true
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false
      responses:
        200:
          description: List of device history upgrade.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevisionHistoryEntryList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /campaigns:
    get:
      tags:
        - Campaign
      summary: List all cmapaigns
      operationId: getCampaigns
      parameters:
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: startDate
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: endDate
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false

      responses:
        200:
          description: List of campaigns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CampaignList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /campaign/{id}:
    get:
      tags:
        - Campaign
      summary: Get a single campaign definition
      operationId: getCampaign
      parameters:
        - in: path
          description: ID of the campaign
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          $ref: '#/components/schemas/Campaign'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Campaign
      summary: Delete a single campaign definition
      operationId: deleteCampaign
      parameters:
        - in: path
          description: ID of the campaign
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Campaign
      summary: Create a single campaign definition
      operationId: createCampaign
      parameters:
        - in: path
          description: ID of the campaign
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Canpaign creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        200:
          $ref: '#/components/schemas/Campaign'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Campaign
      summary: Create a single campaign definition
      operationId: updateCampaign
      parameters:
        - in: path
          description: ID of the campaign
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: Canpaign modification details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        200:
          $ref: '#/components/schemas/Campaign'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /campaign/{id}/entries:
    get:
      tags:
        - Campaign
      summary: List all campaign entries
      operationId: getCampaignEntries
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: startDate
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: endDate
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/schemas/DeviceEntryList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /campaign/{id}/entry/{serialNumber}:
    post:
      tags:
        - Campaign
      operationId: createSingleEntry
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: serialNumber
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEntryList'
      responses:
        200:
          $ref: '#/components/schemas/DeviceEntryList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Campaign
      operationId: deleteSingleEntry
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
        - in: path
          name: serialNumber
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  #########################################################################################
  ##
  ## These are endpoints that all services in the uCentral stack must provide
  ##
  #########################################################################################

  /system:
    post:
      tags:
        - System Commands
      summary: Perform some systeme wide commands
      operationId: systemCommand
      requestBody:
        description: Command details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCommandDetails'
      responses:
        200:
          description: Successfull command execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemCommandResults'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /callbackChannel:
    post:
      tags:
        - Callback
      summary: Generic callback hook
      operationId: postCallback
      parameters:
        - in: query
          name: subscribe
          schema:
            type: boolean
          required: false
        - in: query
          name: uri
          schema:
            type: string
            format: uri
        - in: query
          name: key
          schema:
            type: string
        - in: query
          name: topics
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: topic
          schema:
            type: string
      requestBody:
        description: A generic JSONDocument, may be empty too {}
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyPayload'

      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
